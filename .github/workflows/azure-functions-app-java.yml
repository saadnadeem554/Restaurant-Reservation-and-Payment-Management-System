name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Send SMS using Twilio
        run: |
          export TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}
          export TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}

      - name: Download JavaFX SDK and MSSQL driver
        run: |
          mkdir -p dependencies/javafx-sdk dependencies/sqljdbc
          curl -L -o javafx-sdk.zip https://download2.gluonhq.com/openjfx/23.0.1/openjfx-23.0.1_linux-x64_bin-sdk.zip
          unzip javafx-sdk.zip -d dependencies/javafx-sdk
          curl -L -o sqljdbc.zip https://go.microsoft.com/fwlink/?linkid=2283744
          unzip sqljdbc.zip -d dependencies/sqljdbc
          rm -rf dependencies/sqljdbc/sqljdbc_*/enu/samples

      - name: Download Additional Dependencies
        run: |
          mkdir -p dependencies/libs
          # Download necessary dependencies
          curl -L -o dependencies/libs/commons-logging-1.3.4.jar https://repo1.maven.org/maven2/commons-logging/commons-logging/1.3.4/commons-logging-1.3.4.jar
          curl -L -o dependencies/libs/httpclient-4.5.14.jar https://repo1.maven.org/maven2/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.jar
          curl -L -o dependencies/libs/httpcore-4.4.16.jar https://repo1.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar
          curl -L -o dependencies/libs/jackson-annotations-2.18.1.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.18.1/jackson-annotations-2.18.1.jar
          curl -L -o dependencies/libs/jackson-core-2.18.1.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.18.1/jackson-core-2.18.1.jar
          curl -L -o dependencies/libs/jackson-databind-2.18.1.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.18.1/jackson-databind-2.18.1.jar
          curl -L -o dependencies/libs/jackson-datatype-jsr310-2.18.1.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.1/jackson-datatype-jsr310-2.18.1.jar
          curl -L -o dependencies/libs/jcl-over-slf4j-2.1.0-alpha1.jar https://repo1.maven.org/maven2/org/slf4j/jcl-over-slf4j/2.1.0-alpha1/jcl-over-slf4j-2.1.0-alpha1.jar
          curl -L -o dependencies/libs/joda-time-2.13.0.jar https://repo1.maven.org/maven2/joda-time/joda-time/2.13.0/joda-time-2.13.0.jar
          curl -L -o dependencies/libs/slf4j-api-2.1.0-alpha1.jar https://repo1.maven.org/maven2/org/slf4j/slf4j-api/2.1.0-alpha1/slf4j-api-2.1.0-alpha1.jar
          curl -L -o dependencies/libs/slf4j-reload4j-2.1.0-alpha1.jar https://repo1.maven.org/maven2/org/slf4j/slf4j-reload4j/2.1.0-alpha1/slf4j-reload4j-2.1.0-alpha1.jar
          curl -L -o dependencies/libs/slf4j-simple-2.1.0-alpha1.jar https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/2.1.0-alpha1/slf4j-simple-2.1.0-alpha1.jar
          curl -L -o dependencies/libs/twilio-10.6.3.jar https://repo1.maven.org/maven2/com/twilio/sdk/twilio/10.6.3/twilio-10.6.3.jar

      - name: Organize Resources (FXML, CSS, and PNG files)
        run: |
          mkdir -p resources/
          cp ./UI/*.fxml resources/
          cp ./UI/*.css resources/
          cp ./UI/*.png resources/

      - name: Build JavaFX app
        run: |
          export JAVA_FX_PATH=$(pwd)/dependencies/javafx-sdk/javafx-sdk-23.0.1/lib
          export SQLJDBC_AUTH_PATH=$(pwd)/dependencies/sqljdbc/sqljdbc_12.8/enu/auth/x64
          
          javac -cp "$JAVA_FX_PATH/*:dependencies/sqljdbc/sqljdbc_12.8/enu/jars/mssql-jdbc-12.8.1.jre11.jar:dependencies/libs/*" \
          -d out $(find . -name "*.java")

          jar --create --file MyRestaurantApp.jar --main-class project.RestaurantSystemApp \
          -C out . -C resources .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: my-app-artifacts
          path: |
            MyRestaurantApp.jar
            dependencies/libs/**
            dependencies/sqljdbc/**
            dependencies/javafx-sdk/**
            resources/**
            
  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: my-app-artifacts

      - name: Debug Environment and Dependencies
        run: |
          echo "Checking Java version"
          java -version
          
          echo "Checking Xvfb and ImageMagick"
          which Xvfb
          which import
          
          echo "Listing downloaded artifacts"
          ls -R

      - name: Prepare Azure VM
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
          AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${AZURE_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            # Verbose system checks
            echo "Checking system details"
            uname -a
            lsb_release -a
            
            # Update and install dependencies with verbose output
            sudo apt update -y
            sudo apt install -y xvfb imagemagick
            
            # Verify installations
            which Xvfb
            which import
            
            # Install additional debugging tools
            sudo apt install -y x11-apps mesa-utils x11-utils
            sudo apt install -y scrot
            sudo apt install -y libgl1-mesa-glx libglx-mesa0
            

            
            # Upgrade packages
            sudo apt upgrade -y
            
            # Clean up
            sudo apt autoremove -y
            sudo apt clean
          EOF
      
      ####################
      - name: Copy files to Azure VM and run with advanced screenshot
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
          AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
        run: |
          # Set up SSH key
          mkdir -p ~/.ssh
          echo "${AZURE_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Upload JAR, dependencies, and resources
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa MyRestaurantApp.jar $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r dependencies $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r resources $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/
      
          # Execute remote commands with detailed logging
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            set -x  # Enable command tracing for debugging
            

            # Cleanup previous processes
            sudo pkill -f "java.*RestaurantSystemApp" || true
            sudo pkill Xvfb || true
            sudo rm -f /tmp/.X99-lock
      
            # Prepare directories
            mkdir -p /home/azureuser/screenshots
            chmod 777 /home/azureuser/screenshots
      
            # Start Xvfb
            
            Xvfb :99 -ac -screen 0 1280x1024x8 &> /home/azureuser/xvfb.log &
            XVFB_PID=$!
            sleep 5  # Allow Xvfb to initialize
            DISPLAY=:99 glxinfo | grep "OpenGL"
            export DISPLAY=:99
            export XDG_RUNTIME_DIR=/tmp
            # Launch the JavaFX application
            (
              java -version  # Print Java version for diagnostics
              timeout 10s java \
                -Dprism.verbose=true \
                -Djavafx.verbose=true \
                -Dcom.sun.javafx.isEmbedded=false \
                -Djavafx.platform=desktop \
                -Djavafx.animation.framerate=60 \
                --module-path /home/azureuser/dependencies/javafx-sdk/javafx-sdk-23.0.1/lib \
                --add-modules javafx.controls,javafx.fxml \
                -cp /home/azureuser/MyRestaurantApp.jar:/home/azureuser/dependencies/libs/* \
                project.RestaurantSystemApp > /home/azureuser/app_full_output.log 2>&1 &
                
              sleep 4  # Allow the app to initialize
              
              # Capture screenshots
              for i in {1..3}; do
                import -display :99 -window root /home/azureuser/screenshots/screenshot_import_$i.png || true
                xwd -display :99 -root > /home/azureuser/screenshots/screenshot_xwd_$i.xwd || true
                scrot -d 2 /home/azureuser/screenshots/screenshot_scrot_$i.png || true
              done
      
              # List captured screenshots
              ls -l /home/azureuser/screenshots
            )
      
            # Capture Xvfb log
            cat /home/azureuser/xvfb.log
      
            # Cleanup
            sudo pkill -f "java.*RestaurantSystemApp" || true
            sudo pkill Xvfb || true
            sudo rm -f /tmp/.X99-lock
          EOF
      
          # Retrieve logs and screenshots
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/app_full_output.log full_application_logs.log || true
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/xvfb.log xvfb_logs.log || true
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/screenshots/ . || true
          
          # Display logs
          echo "Full Application Logs:"
          cat full_application_logs.log
          
          echo "Xvfb Logs:"
          cat xvfb_logs.log
          
          # List screenshots
          echo "Screenshot directory contents:"
          ls -l screenshots/


      - name: Upload Diagnostic Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: application-debug-artifacts
          path: |
            full_application_logs.log
            xvfb_logs.log
            screenshots/
          retention-days: 5

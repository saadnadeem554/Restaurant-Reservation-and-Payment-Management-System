name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # ... (previous steps remain the same)

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: my-app-artifacts

      - name: Prepare Azure VM
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
          AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${AZURE_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            # Update package lists and install ImageMagick
            sudo apt update
            sudo apt install -y imagemagick xvfb
            
            # Upgrade packages
            sudo apt upgrade -y
            
            # Clean up
            sudo apt autoremove -y
            sudo apt clean
          EOF
      
      - name: Copy files to Azure VM and run with screenshot
        env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
          AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${AZURE_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Upload JAR, dependencies, and resources
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa MyRestaurantApp.jar $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r dependencies $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r resources $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/
      
          # Execute remote commands with screenshot capture
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            # Install Xvfb and ImageMagick if not already installed
            sudo apt-get update
            sudo apt-get install -y xvfb imagemagick
      
            # Cleanup previous runs to ensure clean environment
            sudo pkill -f "java.*RestaurantSystemApp" || true
            sudo pkill Xvfb || true
            sudo rm -f /tmp/.X99-lock
      
            # Set up virtual framebuffer
            export DISPLAY=:99
            export XDG_RUNTIME_DIR=/tmp
      
            # Start Xvfb in the background
            Xvfb :99 -ac -screen 0 1280x1024x8 &
            sleep 3  # Give Xvfb a moment to start
      
            # Prepare screenshot directory
            mkdir -p /home/azureuser/screenshots
      
            # Run JavaFX application with screenshot capture
            (
              # Run the application
              timeout 10s java -Dprism.order=sw -Djava.awt.headless=false -Djavafx.platform=desktop --module-path /home/azureuser/dependencies/javafx-sdk/javafx-sdk-23.0.1/lib --add-modules javafx.controls,javafx.fxml -cp /home/azureuser/MyRestaurantApp.jar:/home/azureuser/dependencies/libs/* project.RestaurantSystemApp > /home/azureuser/app_output.log 2>&1 &
      
              # Wait a bit to ensure the app starts
              sleep 5
      
              # Capture multiple screenshots
              for i in {1..3}; do
                import -display :99 -window root /home/azureuser/screenshots/screenshot_$i.png
                sleep 2
              done
            )
      
            # Cleanup after execution
            sudo pkill -f "java.*RestaurantSystemApp"
            sudo pkill Xvfb
            sudo rm -f /tmp/.X99-lock
          EOF
      
          # Retrieve logs and screenshots
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/app_output.log application_logs.log || true
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r $AZURE_VM_USER@$AZURE_VM_IP:/home/$AZURE_VM_USER/screenshots/ . || true
          
          # Display logs
          cat application_logs.log
